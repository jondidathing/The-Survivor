{"ast":null,"code":"var _jsxFileName = \"C:\\\\CODING\\\\BLOCKCHAIN\\\\buildspace\\\\buildspace-nft-course-starter\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport './styles/App.css';\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = '';\nconst TOTAL_MINT_COUNT = 50;\n\nconst App = () => {\n  _s();\n\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  const checkIfWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    const accounts = await ethereum.request({\n      method: 'eth_accounts'\n    });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n  /*\r\n  * Implement your connectWallet method here\r\n  */\n\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n      /*\r\n      * Fancy method to request access to account.\r\n      */\n\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      /*\r\n      * Boom! This should print out public address once we authorize Metamask.\r\n      */\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  }; // Render Methods\n\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: connectWallet,\n    className: \"cta-button connect-wallet-button\",\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  /*\r\n  * Added a conditional render! We don't want to show Connect to Wallet if we're already conencted :).\r\n  */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header gradient-text\",\n          children: \"My NFT Collection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"Each unique. Each beautiful. Discover your NFT today.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), currentAccount === \"\" ? renderNotConnectedContainer() : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: null,\n          className: \"cta-button connect-wallet-button\",\n          children: \"Mint NFT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built on @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"Oez+vfH4X005OLgBo/Rzy9wdCKo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/CODING/BLOCKCHAIN/buildspace/buildspace-nft-course-starter/src/App.js"],"names":["React","useEffect","useState","TWITTER_HANDLE","TWITTER_LINK","OPENSEA_LINK","TOTAL_MINT_COUNT","App","currentAccount","setCurrentAccount","checkIfWalletIsConnected","ethereum","window","console","log","accounts","request","method","length","account","connectWallet","alert","error","renderNotConnectedContainer","twitterLogo"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport './styles/App.css';\r\nimport twitterLogo from './assets/twitter-logo.svg';\r\n\r\nconst TWITTER_HANDLE = '_buildspace';\r\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\r\nconst OPENSEA_LINK = '';\r\nconst TOTAL_MINT_COUNT = 50;\r\n\r\nconst App = () => {\r\n  const [currentAccount, setCurrentAccount] = useState(\"\");\r\n  \r\n  const checkIfWalletIsConnected = async () => {\r\n    const { ethereum } = window;\r\n\r\n    if (!ethereum) {\r\n      console.log(\"Make sure you have metamask!\");\r\n      return;\r\n    } else {\r\n      console.log(\"We have the ethereum object\", ethereum);\r\n    }\r\n\r\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\r\n\r\n    if (accounts.length !== 0) {\r\n      const account = accounts[0];\r\n      console.log(\"Found an authorized account:\", account);\r\n      setCurrentAccount(account)\r\n    } else {\r\n      console.log(\"No authorized account found\")\r\n    }\r\n  }\r\n\r\n  /*\r\n  * Implement your connectWallet method here\r\n  */\r\n  const connectWallet = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        alert(\"Get MetaMask!\");\r\n        return;\r\n      }\r\n\r\n      /*\r\n      * Fancy method to request access to account.\r\n      */\r\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\r\n\r\n      /*\r\n      * Boom! This should print out public address once we authorize Metamask.\r\n      */\r\n      console.log(\"Connected\", accounts[0]);\r\n      setCurrentAccount(accounts[0]); \r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  // Render Methods\r\n  const renderNotConnectedContainer = () => (\r\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\r\n      Connect to Wallet\r\n    </button>\r\n  );\r\n\r\n  useEffect(() => {\r\n    checkIfWalletIsConnected();\r\n  }, [])\r\n\r\n  /*\r\n  * Added a conditional render! We don't want to show Connect to Wallet if we're already conencted :).\r\n  */\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n        <div className=\"header-container\">\r\n          <p className=\"header gradient-text\">My NFT Collection</p>\r\n          <p className=\"sub-text\">\r\n            Each unique. Each beautiful. Discover your NFT today.\r\n          </p>\r\n          {currentAccount === \"\" ? (\r\n            renderNotConnectedContainer()\r\n          ) : (\r\n            <button onClick={null} className=\"cta-button connect-wallet-button\">\r\n              Mint NFT\r\n            </button>\r\n          )}\r\n        </div>\r\n        <div className=\"footer-container\">\r\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\r\n          <a\r\n            className=\"footer-text\"\r\n            href={TWITTER_LINK}\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >{`built on @${TWITTER_HANDLE}`}</a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}