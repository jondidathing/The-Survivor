{"ast":null,"code":"var _jsxFileName = \"C:\\\\CODING\\\\BLOCKCHAIN\\\\buildspace\\\\buildspace-nft-course-starter\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './styles/App.css';\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\"; // Constants\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = 'jondoescoding';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = '';\nconst TOTAL_MINT_COUNT = 50;\n\nconst App = () => {\n  _s();\n\n  // storing the user's public wallet\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  const checkIfWalletIsConnected = async () => {\n    // checking for access for the window.ethereum\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      console.log(\"Please get metamask!\");\n      return;\n    } else {\n      console.log(\"We have a ETH object\", ethereum);\n    } // checking if we can the user's wallet\n\n\n    const accounts = await ethereum.request({\n      method: 'eth_accounts'\n    }); // grabbing the first account of a user's metamask if they multiple\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n  /*\r\n  * Implement your connectWallet method here\r\n  */\n\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n      /*\r\n      * Fancy method to request access to account.\r\n      */\n\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      /*\r\n      * Boom! This should print out public address once we authorize Metamask.\r\n      */\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (err) {\n      console.log = err.message;\n    }\n  };\n\n  const askContractToMintNft = async () => {\n    const CONTRACT_ADDRESS = \"0xf095bA72ADa9f5f0805649aB1D8f6A1314D35290\";\n\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.MyEpicNFT();\n        console.log(\"Mining...please wait.\");\n        await nftTxn.wait();\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }; // Render Methods\n\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: connectWallet,\n    className: \"cta-button connect-wallet-button\",\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n  /*\r\n  * This runs our function when the page loads.\r\n  */\n\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header gradient-text\",\n          children: \"The Survivor Collection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"The Survivor get randomized weapons, personality traits, occupation and mutation generated. Stored on chain.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), \"return (\", currentAccount === \"\" ? renderNotConnectedContainer() :\n        /*#__PURE__*/\n\n        /** Add askContractToMintNft Action for the onClick event **/\n        _jsxDEV(\"button\", {\n          onClick: askContractToMintNft,\n          className: \"cta-button connect-wallet-button\",\n          children: \"Mint NFT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 7\n        }, this), \");\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built by @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"Oez+vfH4X005OLgBo/Rzy9wdCKo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/CODING/BLOCKCHAIN/buildspace/buildspace-nft-course-starter/src/App.js"],"names":["React","useEffect","useState","ethers","TWITTER_HANDLE","TWITTER_LINK","OPENSEA_LINK","TOTAL_MINT_COUNT","App","currentAccount","setCurrentAccount","checkIfWalletIsConnected","ethereum","window","console","log","accounts","request","method","length","account","connectWallet","alert","err","message","askContractToMintNft","CONTRACT_ADDRESS","provider","providers","Web3Provider","signer","getSigner","connectedContract","Contract","myEpicNft","abi","nftTxn","MyEpicNFT","wait","hash","error","renderNotConnectedContainer","twitterLogo"],"mappings":"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","sourcesContent":["import './styles/App.css';\r\nimport twitterLogo from './assets/twitter-logo.svg';\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { ethers } from \"ethers\";\r\n\r\n// Constants\r\nconst TWITTER_HANDLE = 'jondoescoding';\r\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\r\nconst OPENSEA_LINK = '';\r\nconst TOTAL_MINT_COUNT = 50;\r\n\r\nconst App = () => {\r\n\r\n  // storing the user's public wallet\r\n  const [currentAccount, setCurrentAccount] = useState(\"\");\r\n\r\n\r\n  const checkIfWalletIsConnected = async () =>{\r\n    // checking for access for the window.ethereum\r\n    const {ethereum} = window;\r\n    if (!ethereum) {\r\n      console.log(\"Please get metamask!\");\r\n      return;\r\n    } else {\r\n      console.log(\"We have a ETH object\", ethereum);\r\n    }\r\n\r\n\r\n      // checking if we can the user's wallet\r\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\r\n\r\n      // grabbing the first account of a user's metamask if they multiple\r\n      if (accounts.length !== 0){\r\n        const account = accounts[0];\r\n        console.log(\"Found an authorized account:\", account);\r\n        setCurrentAccount(account)\r\n      } else {\r\n        console.log(\"No authorized account found\")   \r\n      }\r\n  }\r\n\r\n  /*\r\n  * Implement your connectWallet method here\r\n  */\r\n  const connectWallet = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        alert(\"Get MetaMask!\");\r\n        return;\r\n      }\r\n\r\n      /*\r\n      * Fancy method to request access to account.\r\n      */\r\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\r\n      \r\n      /*\r\n      * Boom! This should print out public address once we authorize Metamask.\r\n      */\r\n      console.log(\"Connected\", accounts[0]);\r\n      setCurrentAccount(accounts[0]); \r\n\r\n    }catch(err) {\r\n      console.log = err.message;\r\n    }\r\n  }\r\n\r\n  const askContractToMintNft = async () => {\r\n    const CONTRACT_ADDRESS = \"0xf095bA72ADa9f5f0805649aB1D8f6A1314D35290\";\r\n  \r\n    try {\r\n      const { ethereum } = window;\r\n  \r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\r\n  \r\n        console.log(\"Going to pop wallet now to pay gas...\")\r\n        let nftTxn = await connectedContract.MyEpicNFT();\r\n  \r\n        console.log(\"Mining...please wait.\")\r\n        await nftTxn.wait();\r\n        \r\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\r\n  \r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  // Render Methods\r\n  const renderNotConnectedContainer = () => (\r\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\r\n      Connect to Wallet\r\n    </button>\r\n  );\r\n\r\n  /*\r\n  * This runs our function when the page loads.\r\n  */\r\n    useEffect(() => {\r\n      checkIfWalletIsConnected();\r\n    }, [])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n        <div className=\"header-container\">\r\n          <p className=\"header gradient-text\">The Survivor Collection</p>\r\n          <p className=\"sub-text\">\r\n          The Survivor get randomized weapons, personality traits, occupation and mutation generated. Stored on chain.\r\n          </p>\r\n          return (\r\n  {currentAccount === \"\" \r\n    ? renderNotConnectedContainer()\r\n    : (\r\n      /** Add askContractToMintNft Action for the onClick event **/\r\n      <button onClick={askContractToMintNft} className=\"cta-button connect-wallet-button\">\r\n        Mint NFT\r\n      </button>\r\n    )\r\n  }\r\n);\r\n        </div>\r\n        <div className=\"footer-container\">\r\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\r\n          <a\r\n            className=\"footer-text\"\r\n            href={TWITTER_LINK}\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >{`built by @${TWITTER_HANDLE}`}</a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}